Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType1: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c3.large

    InstanceType1: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    InstanceType1: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    MaximumPrice:
        Description: Maximum bid value for Spot Instances
        Type: Number
        Default: 0.10

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS cluster
        Type: AWS::EC2::KeyPair::KeyName

    MinClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: How many ECS hosts do you want this cluster to have at most?
        Type: Number
        Default: 2

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

Mappings:

    # These are the latest ECS optimized AMIs as of March 2017:
    #
    #   amzn-ami-2017.03.d-amazon-ecs-optimized
    #   ECS agent:    1.14.3
    #   Docker:       17.03.1-ce
    #   ecs-init:     1.14.3-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-04351e12
        us-east-2:
            AMI: ami-207b5a45
        us-west-1:
            AMI: ami-7d664a1d
        us-west-2:
            AMI: ami-57d9cd2e
        eu-west-1:
            AMI: ami-809f84e6
        eu-west-2:
            AMI: ami-ff15039b
        eu-central-1:
            AMI: ami-a3a006cc
        ap-northeast-1:
            AMI: ami-e4657283
        ap-southeast-1:
            AMI: ami-19f7787a
        ap-southeast-2:
            AMI: ami-42e9f921
        ca-central-1:
            AMI: ami-3da81759

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    SpotFleet:
      Type: AWS::EC2::SpotFleet
      DependsOn:
      - SpotFleetRole
      - SpotFleetInstanceProfile
      - ECSCluster
      Properties:
        SpotFleetRequestConfigData:
          AllocationStrategy: lowestPrice
          IamFleetRole: !GetAtt SpotFleetRole.Arn
          SpotPrice:
            Ref: MaximumPrice
          TargetCapacity:
            Ref: MinClusterSize
          TerminateInstancesWithExpiration: true          
          LaunchSpecifications:
          - IamInstanceProfile:
              Arn: !GetAtt SpotFleetInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType1
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
            UserData:
              "Fn::Base64": !Sub '
                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup'
          - IamInstanceProfile:
              Arn: !GetAtt SpotFleetInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType2
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
            UserData:
              "Fn::Base64": !Sub '
                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup'
          - IamInstanceProfile:
              Arn: !GetAtt SpotFleetInstanceProfile.Arn
            ImageId:
              Fn::FindInMap: [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType3
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
            - GroupId: !Ref SecurityGroup
            SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
            UserData:
              "Fn::Base64": !Sub '
                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup'
      Metadata:
        AWS::CloudFormation::Init:
            config:
                commands:
                    01_add_instance_to_cluster:
                        command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                files:
                    "/etc/cfn/cfn-hup.conf":
                        mode: 000400
                        owner: root
                        group: root
                        content: !Sub |
                            [main]
                            stack=${AWS::StackId}
                            region=${AWS::Region}
                    
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                        content: !Sub |
                            [cfn-auto-reloader-hook]
                            triggers=post.update
                            path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                            action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                services: 
                    sysvinit:
                        cfn-hup: 
                            enabled: true
                            ensureRunning: true
                            files: 
                                - /etc/cfn/cfn-hup.conf
                                - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    SpotFleetInstanceProfile:
      DependsOn:
        - SpotFleetInstanceRole
      Properties:
        Path: /
        Roles: !Ref spotFleetInstanceRole
      Type: AWS::IAM::InstanceProfile
    
    SpotFleetInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
          Version: 2012-10-17
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        Path: /
        Policies:
        - PolicyDocument:
            Statement:
            - Action:
              - ecs:UpdateContainerInstancesState
              Effect: Allow
              Resource: '*'
            Version: 2012-10-17
          PolicyName: ecsUpdateContainerInstancesStatePolicy
        - PolicyDocument:
            Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              Effect: Allow
              Resource: arn:aws:logs:*:*:*
            Version: 2012-10-17
          PolicyName: cloudWatchLogsPolicy
        - PolicyDocument:
            Statement:
            - Action:
              - sns:Publish
              Effect: Allow
              Resource:
                Ref: snsTopic
            Version: 2012-10-17
          PolicyName: snsPublishPolicy

    SpotFleetRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - spotfleet.amazonaws.com
          Version: 2012-10-17
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
        Path: /
      Type: AWS::IAM::Role

    # ECSAutoScalingGroup:
    #     Type: AWS::AutoScaling::AutoScalingGroup
    #     Properties: 
    #         VPCZoneIdentifier: !Ref Subnets
    #         LaunchConfigurationName: !Ref ECSLaunchConfiguration
    #         MinSize: !Ref MinClusterSize
    #         MaxSize: !Ref MaxClusterSize
    #         DesiredCapacity: !Ref MinClusterSize
    #         Tags: 
    #             - Key: Name
    #               Value: !Sub ${EnvironmentName}-ecs
    #               PropagateAtLaunch: true
    #     CreationPolicy:
    #         ResourceSignal: 
    #             Timeout: PT15M
    #     UpdatePolicy:
    #         AutoScalingRollingUpdate:
    #             MinInstancesInService: 1
    #             MaxBatchSize: 1
    #             PauseTime: PT15M
    #             WaitOnResourceSignals: true
        
    # ECSLaunchConfiguration:
    #     Type: AWS::AutoScaling::LaunchConfiguration
    #     Properties:
    #         ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
    #         InstanceType: !Ref InstanceType
    #         SecurityGroups: 
    #             - !Ref SecurityGroup
    #         IamInstanceProfile: !Ref ECSInstanceProfile
    #         KeyName: !Ref KeyName
    #         UserData: 
    #             "Fn::Base64": !Sub |
    #                 #!/bin/bash
    #                 yum install -y aws-cfn-bootstrap
    #                 /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
    #                 /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

    #     Metadata:
    #         AWS::CloudFormation::Init:
    #             config:
    #                 commands:
    #                     01_add_instance_to_cluster:
    #                         command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
    #                 files:
    #                     "/etc/cfn/cfn-hup.conf":
    #                         mode: 000400
    #                         owner: root
    #                         group: root
    #                         content: !Sub |
    #                             [main]
    #                             stack=${AWS::StackId}
    #                             region=${AWS::Region}
                        
    #                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
    #                         content: !Sub |
    #                             [cfn-auto-reloader-hook]
    #                             triggers=post.update
    #                             path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
    #                             action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

    #                 services: 
    #                     sysvinit:
    #                         cfn-hup: 
    #                             enabled: true
    #                             ensureRunning: true
    #                             files: 
    #                                 - /etc/cfn/cfn-hup.conf
    #                                 - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    ScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: PercentChangeInCapacity
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            PolicyType: StepScaling
            StepAdjustments:
                - MetricIntervalLowerBound: -10
                  MetricIntervalUpperBound: 0
                  ScalingAdjustment: -10
                - MetricIntervalLowerBound: -20
                  MetricIntervalUpperBound: -10
                  ScalingAdjustment: -20
                - MetricIntervalLowerBound: -30
                  MetricIntervalUpperBound: -20
                  ScalingAdjustment: -30
                - MetricIntervalLowerBound: -40
                  MetricIntervalUpperBound: -30
                  ScalingAdjustment: -40
                - MetricIntervalLowerBound: ''
                  MetricIntervalUpperBound: -40
                  ScalingAdjustment: -50

    ScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref ECSAutoScalingGroup
            Cooldown: 180
            ScalingAdjustment: 1

    # CPUReservedTooLowAlarm:
    #     Type: AWS::CloudWatch::Alarm
    #     Properties:
    #         AlarmName:  !Sub 'ECS ${EnvironmentName} Reserved CPU too low'
    #         AlarmDescription: !Sub 'Alarm if ECS cluster ${EnvironmentName} have too little CPU reserved'
    #         Namespace: AWS/ECS
    #         MetricName: CPUReservation
    #         Dimensions:
    #             - Name: ClusterName
    #               Value: !Ref ECSCluster
    #         Statistic: Average
    #         Period: 60
    #         EvaluationPeriods: 20
    #         Threshold: 70
    #         ComparisonOperator: LessThanThreshold
    #         AlarmActions:
    #             - !Ref ScaleDownPolicy

    # CPUReservedTooHighAlarm:
    #     Type: AWS::CloudWatch::Alarm
    #     Properties:
    #         AlarmName:  !Sub 'ECS ${EnvironmentName} Reserved CPU too high'
    #         AlarmDescription: !Sub 'Alarm if ECS cluster ${EnvironmentName} have too much CPU reserved'
    #         Namespace: AWS/ECS
    #         MetricName: CPUReservation
    #         Dimensions:
    #             - Name: ClusterName
    #               Value: !Ref ECSCluster
    #         Statistic: Average
    #         Period: 60
    #         EvaluationPeriods: 5
    #         Threshold: 90
    #         ComparisonOperator: GreaterThanOrEqualToThreshold
    #         AlarmActions:
    #             - !Ref ScaleUpPolicy

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.
    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTask",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

